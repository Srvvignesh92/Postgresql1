-- powershell script calling 

Start-Job -ScriptBlock {
    psql -h your-host -U user -d dbname -c "PERFORM your_func();"
}

-- call proc in powershell
Start-Job -ScriptBlock {
    $env:PGPASSWORD = "your_password"
    & "C:\Users\Administrator\AppData\Local\Programs\pgAdmin 4\runtime\psql.exe" `
        -h database-1.crw4ks6ianl3.eu-west-1.rds.amazonaws.com `
        -U postgres `
        -d test `
        -c "CALL get_users_by_min_age(30);" `
        > "$env:TEMP\job_output_30.log" 2>&1
}



-- with parameters and func to choose the procs based on the condition 

# Define connection details
$host = "your-host-name"
$port = "5432"
$db = "your-db-name"
$user = "your-username"

# Read the parameters from CSV
$functionParams = Import-Csv -Path "C:\path\to\function_parameters.csv"

# Loop through each row and run the function in parallel
foreach ($param in $functionParams) {
    # Convert StartDate to DateTime object for comparison
    $startDate = [DateTime]::Parse($param.StartDate)

    # Determine the function to use based on the year of StartDate
    if ($startDate.Year -ge 2023) {
        # Use function 1 and 2 for dates >= 2023
        $sql1 = "PERFORM $($param.FunctionName)('$($param.StartDate)', '$($param.EndDate)');"
        Start-Job -ScriptBlock {
            param ($sql, $host, $port, $db, $user)
            psql -h $host -p $port -U $user -d $db -c $sql
        } -ArgumentList $sql1, $host, $port, $db, $user
    } else {
        # Use function 3 and 4 for dates < 2023
        $sql2 = "PERFORM $($param.FunctionName)('$($param.StartDate)', '$($param.EndDate)');"
        Start-Job -ScriptBlock {
            param ($sql, $host, $port, $db, $user)
            psql -h $host -p $port -U $user -d $db -c $sql
        } -ArgumentList $sql2, $host, $port, $db, $user
    }
}

# Wait for all jobs to complete
Get-Job | Wait-Job

# Retrieve output from all jobs
Get-Job | Receive-Job

# Clean up jobs
Get-Job | Remove-Job


-- python script ---

import subprocess
import concurrent.futures
import os

# === CONFIGURE THESE ===
psql_path = r'C:\Program Files\PostgreSQL\15\bin\psql.exe'  # Update if needed
host = 'your-cluster-endpoint.amazonaws.com'
port = '5432'
user = 'your_user'
dbname = 'your_db'
password = 'your_password'

# === Function calls ===
functions = [
    "SELECT migrate_data_range_1();",
    "SELECT migrate_data_range_2();",
    "SELECT migrate_data_range_3();",
    "SELECT migrate_data_range_4();"
]

def run_function(sql):
    command = [
        psql_path,
        f"--host={host}",
        f"--port={port}",
        f"--username={user}",
        f"--dbname={dbname}",
        "-c", sql
    ]

    env = os.environ.copy()
    env["PGPASSWORD"] = password  # Use environment var for password

    try:
        result = subprocess.run(command, env=env, capture_output=True, text=True, check=True)
        print(f"\n[SUCCESS] {sql.strip()}\n{result.stdout}")
    except subprocess.CalledProcessError as e:
        print(f"\n[ERROR] {sql.strip()}\n{e.stderr}")

if __name__ == "__main__":
    with concurrent.futures.ThreadPoolExecutor() as executor:
        executor.map(run_function, functions)


---

# Define connection info (except password)
$psqlPath = "C:\Users\Administrator\AppData\Local\Programs\pgAdmin 4\runtime\psql.exe"
$host = "your-db-hostname"
$db = "your-db-name"
$user = "postgres"

# Prompt for password securely
$securePwd = Read-Host "Enter PostgreSQL password" -AsSecureString
$pwd = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($securePwd))

# Ask user how many fund types they want to run
[int]$count = Read-Host "Enter number of fund types to process"
$fundTypes = @()

for ($i = 1; $i -le $count; $i++) {
    $fund = Read-Host "Enter fund type #$i"
    $fundTypes += $fund
}

# Create logs directory
$logDir = "$PWD\logs"
if (-not (Test-Path $logDir)) {
    New-Item -Path $logDir -ItemType Directory
}

# Launch background jobs for each fund type
foreach ($fund in $fundTypes) {
    $logFile = "$logDir\job_$fund.txt"
    $query = "CALL process_fund_data('$fund');"

    Start-Job -ScriptBlock {
        param($psqlPath, $host, $db, $user, $pwd, $query, $logFile)

        $env:PGPASSWORD = $pwd
        & $psqlPath -h $host -d $db -U $user -c $query *>&1 | Out-File -FilePath $logFile -Encoding utf8

    } -ArgumentList $psqlPath, $host, $db, $user, $pwd, $query, $logFile
}

Write-Host "`nStarted $($fundTypes.Count) background jobs. Logs are saved in: $logDir"


